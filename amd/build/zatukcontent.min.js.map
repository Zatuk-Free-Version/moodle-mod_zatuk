{"version":3,"file":"zatukcontent.min.js","sources":["../src/zatukcontent.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Defines zatuk content script.\n *\n * @since      Moodle 2.0\n * @copyright  2023 Moodle India\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n[\n    'jquery',\n    'core/notification',\n    'core/templates',\n    'core/paged_content_factory',\n    'core/str',\n    'mod_zatuk/zatuk_repository',\n    'mod_zatuk/renderzatuk',\n    'core/custom_interaction_events',\n    'core/modal_factory'\n],\nfunction(\n    $,\n    Notification,\n    Templates,\n    PagedContentFactory,\n    Str,\n    zatukVideosRepository,\n    RenderZatuk,\n    CustomEvents,\n    ModalFactory\n) {\n\n    const confirmbox = (message) => {\n     ModalFactory.create({\n        body: message,\n        type: ModalFactory.types.ALERT,\n        buttons: {\n            ok: Str.get_string('Thank_you'),\n        },\n        removeOnClose: true,\n      })\n      .done(function(modal) {\n        modal.show();\n      });\n    };\n    var length, videosOffset, StatusFilter, SortFilter, SearchFilter;\n    var limit = 10;\n    var SELECTORS = {\n        EMPTY_MESSAGE: '[data-region=\"empty-message\"]',\n        ROOT: '[data-region=\"zatuk-list-container\"]',\n        ZATUK_LIST_CONTENT: '[data-region=\"zatuk-list-content\"]',\n        ZATUK_LIST_LOADING_PLACEHOLDER: '[data-region=\"zatuk-list-loading-placeholder\"]',\n        FILTERS: '[data-region=\"filter\"]',\n        FILTER_OPTION: '[data-filter]',\n        SEARCH_QUERY: '[data-filter=\"searchfilter\"]'\n    };\n    var TEMPLATES = {\n        ZATUK_LIST_CONTENT: 'mod_zatuk/video_list_item'\n    };\n    var DEFAULT_PAGED_CONTENT_CONFIG = {\n        pagingbar: true,\n        ignoreControlWhileLoading: true,\n        controlPlacementBottom: true,\n        ariaLabels: {\n            itemsperpagecomponents: 'ariaeventlistpagelimit, mod_timeline',\n        }\n    };\n    /**\n     * Hide the content area and display the empty content message.\n     *\n     * @param {object} root The container element\n     */\n    var hideContent = function(root) {\n        root.find(SELECTORS.ZATUK_LIST_CONTENT).addClass('hidden');\n        root.find(SELECTORS.EMPTY_MESSAGE).removeClass('hidden');\n    };\n    /**\n     * Show the content area and hide the empty content message.\n     *\n     * @param {object} root The container element\n     */\n    var showContent = function(root) {\n        root.find(SELECTORS.ZATUK_LIST_CONTENT).removeClass('hidden');\n        root.find(SELECTORS.EMPTY_MESSAGE).addClass('hidden');\n    };\n    /**\n     * Empty the content area.\n     *\n     * @param {object} root The container element\n     */\n    var emptyContent = function(root) {\n        root.find(SELECTORS.ZATUK_LIST_CONTENT).empty();\n    };\n    /**\n     * Get the default context to render the paged content mustache\n     * template.\n     * @return {object}\n     */\n    var getDefaultTemplateContext = function() {\n        return {\n            pagingbar: true,\n            pagingdropdown: true,\n            skipjs: true,\n            ignorecontrolwhileloading: true,\n            controlplacementbottom: false\n        };\n    };\n    /**\n     * @param {array} zatukVideos List of calendar events\n     * @return {object}\n     */\n    var buildTemplateContext = function(zatukVideos) {\n        var templateContext = getDefaultTemplateContext();\n        templateContext.videos = [];\n\n        zatukVideos.forEach(function(zatukVideo) {\n            templateContext.videos.push(zatukVideo);\n        });\n        return templateContext;\n    };\n    /**\n     * Render the HTML for the given calendar events.\n     *\n     * @param {array} zatukVideos  A list of calendar events\n     * @return {promise} Resolved with HTML and JS strings.\n     */\n    var render = function(zatukVideos) {\n        var templateContext = buildTemplateContext(zatukVideos);\n        templateContext.itemsperpage = 10;\n        var templateName = TEMPLATES.ZATUK_LIST_CONTENT;\n\n        return Templates.render(templateName, templateContext);\n    };\n\n    var load = function( limit, videosOffset, videosLimit, lastId, StatusFilter) {\n        return zatukVideosRepository.uploadedVideos({\n          statusfilter: StatusFilter,\n          sort: SortFilter,\n          limit: limit,\n          search: SearchFilter,\n          offset: videosOffset\n        });\n    };\n    var updatePreferences = function() {\n        StatusFilter = $(SELECTORS.ROOT).attr('data-statusfilter');\n        SearchFilter = $(SELECTORS.ROOT).attr('data-searchquery');\n\n        var args = {\n          statusfilter: StatusFilter,\n          search: SearchFilter,\n          limit: limit,\n          offset: videosOffset\n        };\n\n\n        return zatukVideosRepository.updatePreferences(args);\n    };\n    /**\n     * Event listener for the Display filter (cards, list).\n     *\n     * @param {object} root The root element for the overview mod\n     */\n    var registerSelector = function(root) {\n        if(typeof root != 'undefined'){\n          root = $(root);\n        }else{\n            root = $(SELECTORS.ROOT);\n        }\n\n        var Selector = root.find(SELECTORS.FILTERS);\n        var searchInput = root.find(SELECTORS.SEARCH_QUERY);\n        CustomEvents.define(Selector, [CustomEvents.events.activate]);\n        $('#id_search').on('click', function(){\n            var query = $(searchInput).val();\n            root.attr('data-searchquery', query);\n            var preferences = updatePreferences();\n                preferences.then(function(result) {\n                    root.attr('data-length', result.length);\n                    init();\n                });\n        });\n        Selector.on(\n            CustomEvents.events.activate,\n            SELECTORS.FILTER_OPTION,\n            function(e, data) {\n                var option = $(e.target);\n                var filter = option.attr('data-filter');\n                root.attr('data-' + filter, option.attr('data-value'));\n                var preferences = updatePreferences();\n                preferences.then(function(result) {\n                    root.attr('data-length', result.length);\n                    init();\n                });\n                data.originalEvent.preventDefault();\n            }\n        );\n    };\n    /**\n     * Handle a single page request from the paged content. Uses the given page data to request\n     * the events from the server.\n     *\n     * Checks the given preloadedPages before sending a request to the server to make sure we\n     * don't load data unnecessarily.\n     *\n     * @param {object} pageData A single page data (see core/paged_content_pages for more info).\n     * @param {object} actions Paged content actions (see core/paged_content_pages for more info).\n     * @param {object} lastIds The last event ID for each loaded page. Page number is key, id is value.\n     * @param {object} preloadedPages An object of preloaded page data. Page number as key, data promise as value.\n     * @param {int|undefined} StatusFilter Course ID to restrict events to\n     * @param {Number} videosOffset How many days (from midnight) to offset the results from\n     * @param {int|undefined} videosLimit How many dates (from midnight) to limit the result to\n     * @return {object} jQuery promise resolved with calendar events.\n     */\n    var loadEventsFromPageData = function(\n        pageData,\n        actions,\n        lastIds,\n        preloadedPages,\n        StatusFilter,\n        videosOffset,\n        videosLimit\n    ) {\n\n        var pageNumber = pageData.pageNumber;\n        var limit = pageData.limit;\n        var lastPageNumber = pageNumber;\n        var videosOffset = (pageNumber-1) * videosLimit;\n\n        // This is here to protect us if, for some reason, the pages\n        // are loaded out of order somehow and we don't have a reference\n        // to the previous page. In that case, scan back to find the most\n        // recent page we've seen.\n        while (!lastIds.hasOwnProperty(lastPageNumber)) {\n            lastPageNumber--;\n        }\n        // Use the last id of the most recent page.\n        var lastId = lastIds[lastPageNumber];\n        var eventsPromise = null;\n\n        if (preloadedPages && preloadedPages.hasOwnProperty(pageNumber)) {\n            // This page has been preloaded so use that rather than load the values\n            // again.\n            eventsPromise = preloadedPages[pageNumber];\n        } else {\n            // Load one more than the given limit so that we can tell if there\n            // is more content to load after this.\n            eventsPromise = load(limit + 1, videosOffset, videosLimit, lastId, StatusFilter);\n        }\n\n        return eventsPromise.then(function(result) {\n            if (!result.length) {\n                // If we didn't get any events back then tell the paged content\n                // that we're done loading.\n                actions.allItemsLoaded(pageNumber);\n                return [];\n            }\n            var zatukVideos = result.data;\n            return zatukVideos;\n        });\n    };\n    /**\n     * Use the paged content factory to create a paged content element for showing\n     * the event list. We only provide a page limit to the factory because we don't\n     * know exactly how many pages we'll need. This creates a paging bar with just\n     * next/previous buttons.\n     *\n     * This function specifies the callback for loading the event data that the user\n     * is requesting.\n     *\n     * @param {int|array} length\n     * @param {int|array} pageLimit A single limit or list of limits as options for the paged content\n     * @param {object} preloadedPages An object of preloaded page data. Page number as key, data promise as value.\n     * @param {object} firstLoad A jQuery promise to be resolved after the first set of data is loaded.\n     * @param {int|undefined} StatusFilter Course ID to restrict events to\n     * @param {Number} videosOffset How many days (from midnight) to offset the results from\n     * @param {string} paginationAriaLabel String to set as the aria label for the pagination bar.\n     * @param {object} additionalConfig Additional config options to pass to pagedContentFactory\n     * @return {object} jQuery promise.\n     */\n    var createPagedContent = function(\n        length,\n        pageLimit,\n        preloadedPages,\n        firstLoad,\n        StatusFilter,\n        videosOffset,\n        paginationAriaLabel,\n        additionalConfig\n    ) {\n        // Remember the last event id we loaded on each page because we can't\n        // use the offset value since the backend can skip events if the user doesn't\n        // have the capability to see them. Instead we load the next page of events\n        // based on the last seen event id.\n        var lastIds = {'1': 0};\n        var hasContent = false;\n        var config = $.extend({}, DEFAULT_PAGED_CONTENT_CONFIG, additionalConfig);\n\n        return Str.get_string(\n                'ariaeventlistpagelimit',\n                'mod_timeline',\n                $.isArray(pageLimit) ? pageLimit[0].value : pageLimit\n            )\n            .then(function(string) {\n                config.ariaLabels.itemsperpage = string;\n                config.ariaLabels.paginationnav = paginationAriaLabel;\n                return string;\n            })\n            .then(function() {\n                return PagedContentFactory.createWithTotalAndLimit(length,\n                    pageLimit,\n                    function(pagesData, actions) {\n                        var promises = [];\n                        pagesData.forEach(function(pageData) {\n                            var pagePromise = loadEventsFromPageData(\n                                pageData,\n                                actions,\n                                lastIds,\n                                preloadedPages,\n                                StatusFilter,\n                                videosOffset,\n                                pageLimit\n                            ).then(function(zatukVideos) {\n                                if (zatukVideos.length) {\n                                    // Remember that we've loaded content.\n                                    hasContent = true;\n                                    return render(zatukVideos);\n                                } else {\n                                    return zatukVideos;\n                                }\n                            })\n                            .catch(Notification.exception);\n                            promises.push(pagePromise);\n                        });\n                        $.when.apply($, promises).then(function() {\n                            // Tell the calling code that the first page has been loaded\n                            // and whether it contains any content.\n                            firstLoad.resolve(hasContent);\n                            return;\n                        })\n                        .catch(function() {\n                            firstLoad.resolve(hasContent);\n                        });\n\n                        return promises;\n                    },\n                    config\n                );\n            });\n    };\n    /**\n     * Create a paged content region for the calendar events in the given root element.\n     * The content of the root element are replaced with a new paged content section\n     * each time this function is called.\n     *\n     * This function will be called each time the offset or limit values are changed to\n     * reload the event list region.\n     *\n     * @param {object} root The event list container element\n     * @param {int|array} pageLimit A single limit or list of limits as options for the paged content\n     * @param {object} preloadedPages An object of preloaded page data. Page number as key, data promise as value.\n     * @param {string} paginationAriaLabel String to set as the aria label for the pagination bar.\n     * @param {object} additionalConfig Additional config options to pass to pagedContentFactory\n     */\n    var init = function(root, pageLimit = 10, preloadedPages, paginationAriaLabel, additionalConfig) {\n        if(typeof root != 'undefined'){\n            root = $(root);\n        }else{\n            root = $(SELECTORS.ROOT);\n        }\n        // Create a promise that will be resolved once the first set of page\n        // data has been loaded. This ensures that the loading placeholder isn't\n        // hidden until we have all of the data back to prevent the page elements\n        // jumping around.\n        var firstLoad = $.Deferred();\n        var zatukListContent = root.find(SELECTORS.ZATUK_LIST_CONTENT);\n        var loadingPlaceholder = root.find(SELECTORS.ZATUK_LIST_LOADING_PLACEHOLDER);\n         length = root.attr('data-length');\n         videosOffset = root.attr('data-videosOffset');\n         StatusFilter = root.attr('data-statusfilter');\n         SortFilter = root.attr('data-sortfilter');\n         SearchFilter = root.attr('data-searchquery');\n        // Make sure the content area and loading placeholder is visible.\n        // This is because the init function can be called to re-initialise\n        // an existing event list area.\n        emptyContent(root);\n        showContent(root);\n        loadingPlaceholder.removeClass('hidden');\n        // Created the paged content element.\n        return createPagedContent(length,pageLimit, preloadedPages, firstLoad, StatusFilter, videosOffset,\n                paginationAriaLabel,  additionalConfig)\n            .then(function(html, js) {\n                html = $(html);\n                // Hide the content for now.\n                html.addClass('hidden');\n                // Replace existing elements with the newly created paged content.\n                // If we're reinitialising an existing event list this will replace\n                // the old event list (including removing any event handlers).\n                Templates.replaceNodeContents(zatukListContent, html, js);\n\n                firstLoad.then(function(hasContent) {\n                    // Prevent changing page elements too much by only showing the content\n                    // once we've loaded some data for the first time. This allows our\n                    // fancy loading placeholder to shine.\n                    html.removeClass('hidden');\n                    loadingPlaceholder.addClass('hidden');\n                    if (!hasContent) {\n                        // If we didn't get any data then show the empty data message.\n                        hideContent(root);\n                        var confirmA = '<div class=\"d-flex justify-content-center align-items-center';\n                        var confirmB = 'flex-column w-100 p-3 zatuknodatadialogue_content\">';\n                        var confirmC = '<div class=\"icon\"></div><h4 class=\"my-3\"> No Records Found.</h4></div>';\n                        confirmbox(confirmA + confirmB + confirmC);\n                    }\n                    return hasContent;\n                })\n                .catch(function() {\n                    return false;\n                });\n\n                return html;\n            })\n            .catch(Notification.exception);\n    };\n    return {\n        init: init,\n        rootSelector: SELECTORS.ROOT,\n        registerSelector: registerSelector\n    };\n});\n"],"names":["define","$","Notification","Templates","PagedContentFactory","Str","zatukVideosRepository","RenderZatuk","CustomEvents","ModalFactory","confirmbox","message","create","body","type","types","ALERT","buttons","ok","get_string","removeOnClose","done","modal","show","length","videosOffset","StatusFilter","SortFilter","SearchFilter","SELECTORS","TEMPLATES","DEFAULT_PAGED_CONTENT_CONFIG","pagingbar","ignoreControlWhileLoading","controlPlacementBottom","ariaLabels","itemsperpagecomponents","hideContent","root","find","addClass","removeClass","showContent","emptyContent","empty","updatePreferences","attr","args","statusfilter","search","limit","offset","loadEventsFromPageData","pageData","actions","lastIds","preloadedPages","videosLimit","pageNumber","lastPageNumber","hasOwnProperty","eventsPromise","lastId","uploadedVideos","sort","load","then","result","data","allItemsLoaded","createPagedContent","pageLimit","firstLoad","paginationAriaLabel","additionalConfig","hasContent","config","extend","isArray","value","string","itemsperpage","paginationnav","createWithTotalAndLimit","pagesData","promises","forEach","pagePromise","zatukVideos","templateContext","pagingdropdown","skipjs","ignorecontrolwhileloading","controlplacementbottom","zatukVideo","videos","push","buildTemplateContext","templateName","render","catch","exception","when","apply","resolve","init","Deferred","zatukListContent","loadingPlaceholder","html","js","replaceNodeContents","confirmA","rootSelector","registerSelector","Selector","searchInput","events","activate","on","query","val","e","option","target","filter","originalEvent","preventDefault"],"mappings":"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"}